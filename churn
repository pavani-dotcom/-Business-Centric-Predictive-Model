{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1YJGhokyOU78wrEhI52-Jl2W54XD7NS4R","authorship_tag":"ABX9TyPa+5Fh55Jh3tl2e11IDjgD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install lightgbm shap lifelines scikit-learn pandas numpy matplotlib seaborn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lUd6dJlyX0PK","executionInfo":{"status":"ok","timestamp":1755249046654,"user_tz":-330,"elapsed":12188,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"3b7fe75c-6868-41fa-d176-c824410ba63b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: lightgbm in /usr/local/lib/python3.11/dist-packages (4.1.0)\n","Requirement already satisfied: shap in /usr/local/lib/python3.11/dist-packages (0.46.0)\n","Collecting lifelines\n","  Downloading lifelines-0.30.0-py3-none-any.whl.metadata (3.2 kB)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.5.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.9.2)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from lightgbm) (1.15.3)\n","Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.11/dist-packages (from shap) (4.67.1)\n","Requirement already satisfied: packaging>20.9 in /usr/local/lib/python3.11/dist-packages (from shap) (23.2)\n","Requirement already satisfied: slicer==0.0.8 in /usr/local/lib/python3.11/dist-packages (from shap) (0.0.8)\n","Requirement already satisfied: numba in /usr/local/lib/python3.11/dist-packages (from shap) (0.60.0)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.11/dist-packages (from shap) (3.1.1)\n","Requirement already satisfied: autograd>=1.5 in /usr/local/lib/python3.11/dist-packages (from lifelines) (1.8.0)\n","Collecting autograd-gamma>=0.3 (from lifelines)\n","  Downloading autograd-gamma-0.5.0.tar.gz (4.0 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting formulaic>=0.2.2 (from lifelines)\n","  Downloading formulaic-1.2.0-py3-none-any.whl.metadata (7.0 kB)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.59.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.9)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (9.5.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.0.9)\n","Collecting interface-meta>=1.2.0 (from formulaic>=0.2.2->lifelines)\n","  Downloading interface_meta-1.3.0-py3-none-any.whl.metadata (6.7 kB)\n","Requirement already satisfied: narwhals>=1.17 in /usr/local/lib/python3.11/dist-packages (from formulaic>=0.2.2->lifelines) (2.1.0)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.11/dist-packages (from formulaic>=0.2.2->lifelines) (4.14.1)\n","Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.11/dist-packages (from formulaic>=0.2.2->lifelines) (1.17.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba->shap) (0.43.0)\n","Downloading lifelines-0.30.0-py3-none-any.whl (349 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m349.3/349.3 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading formulaic-1.2.0-py3-none-any.whl (117 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m117.2/117.2 kB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading interface_meta-1.3.0-py3-none-any.whl (14 kB)\n","Building wheels for collected packages: autograd-gamma\n","  Building wheel for autograd-gamma (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for autograd-gamma: filename=autograd_gamma-0.5.0-py3-none-any.whl size=4030 sha256=f7312815488464521095990a2a3fa67754806fbe9df6b3e332335d7c8fcdb50a\n","  Stored in directory: /root/.cache/pip/wheels/8b/67/f4/2caaae2146198dcb824f31a303833b07b14a5ec863fb3acd7b\n","Successfully built autograd-gamma\n","Installing collected packages: interface-meta, autograd-gamma, formulaic, lifelines\n","Successfully installed autograd-gamma-0.5.0 formulaic-1.2.0 interface-meta-1.3.0 lifelines-0.30.0\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from sklearn.metrics import (\n","    accuracy_score, precision_score, recall_score, f1_score,\n","    roc_auc_score, average_precision_score, log_loss,\n","    classification_report, confusion_matrix\n",")\n","import joblib\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# Model\n","from lightgbm import LGBMClassifier\n","\n","# Explainability\n","import shap\n","\n","# Survival Analysis\n","from lifelines import CoxPHFitter\n","from lifelines.utils import concordance_index"],"metadata":{"id":"JIyMTxQeX0R4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["project_path = '/content/drive/MyDrive/Business-Centric Predictive Model'\n","!mkdir -p \"{project_path}\"\n","print(f\"Project directory created at: {project_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qw40vJ5OX0Uc","executionInfo":{"status":"ok","timestamp":1755189639130,"user_tz":-330,"elapsed":118,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"2a454198-e1cf-4447-e2ce-b34732ed2bb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Project directory created at: /content/drive/MyDrive/Business-Centric Predictive Model\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()  # Upload: WA_Fn-UseC_-Telco-Customer-Churn.csv\n","\n","df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')\n","print(f\"Loaded data with shape: {df.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"id":"QdY_rw9wX0Wx","executionInfo":{"status":"ok","timestamp":1755189676255,"user_tz":-330,"elapsed":11545,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"e69ba9e4-df65-4a15-8705-62dad8177f5f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-56e9c2d9-cc6f-4161-b46a-8d842b49b587\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-56e9c2d9-cc6f-4161-b46a-8d842b49b587\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving WA_Fn-UseC_-Telco-Customer-Churn.csv to WA_Fn-UseC_-Telco-Customer-Churn (3).csv\n","Loaded data with shape: (7043, 21)\n"]}]},{"cell_type":"code","source":["df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\n","df['TotalCharges'].fillna(df['MonthlyCharges'], inplace=True)\n","df['Churn'] = (df['Churn'] == 'Yes').astype(int)"],"metadata":{"id":"TDoPxzltX0Ze"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['tenure_months'] = df['tenure']\n","df['monthly_per_service'] = df['MonthlyCharges'] / (\n","    1 + (df['PhoneService'] == 'Yes') +\n","    (df['InternetService'] != 'No')\n",")\n","df['is_month_to_month'] = (df['Contract'] == 'Month-to-month').astype(int)\n","df['has_fiber'] = (df['InternetService'] == 'Fiber optic').astype(int)\n","df['no_online_support'] = ((df['OnlineBackup'] == 'No') & (df['TechSupport'] == 'No')).astype(int)\n","df['avg_monthly_spend'] = df['TotalCharges'] / (df['tenure'] + 1)"],"metadata":{"id":"4SCPQ8V-X0b8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np.random.seed(42)\n","df['past_emails_sent'] = np.random.poisson(2, len(df))\n","df['past_discount_offered'] = np.random.choice([0, 5, 10], len(df), p=[0.7, 0.2, 0.1])\n","df['support_tickets_6m'] = np.random.poisson(1.5, len(df))\n","df['days_since_last_interaction'] = np.random.randint(0, 365, len(df))\n","df['CLV'] = df['avg_monthly_spend'] * (12 + df['tenure'] / 2)"],"metadata":{"id":"uQn55D2sX0eN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["refined_path = f\"{project_path}/refined_dataset.csv\"\n","df.to_csv(refined_path, index=False)\n","print(f\"Refined dataset saved to: {refined_path}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0beYwucUX0hF","executionInfo":{"status":"ok","timestamp":1755189750021,"user_tz":-330,"elapsed":147,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"bd0c3a52-ac64-4221-8d44-f2a86017209c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Refined dataset saved to: /content/drive/MyDrive/Business-Centric Predictive Model/refined_dataset.csv\n"]}]},{"cell_type":"code","source":["cat_cols = ['Contract', 'PaymentMethod', 'gender', 'InternetService']\n","num_cols = ['tenure', 'MonthlyCharges', 'TotalCharges', 'CLV',\n","            'support_tickets_6m', 'days_since_last_interaction', 'avg_monthly_spend']\n","\n","X = df[num_cols + cat_cols]\n","y = df['Churn']\n","\n","# Sort by tenure (proxy for time) and split\n","df_sorted = df.sort_values('tenure')\n","split_idx = int(0.8 * len(df_sorted))\n","train_idx = df_sorted.iloc[:split_idx].index\n","test_idx = df_sorted.iloc[split_idx:].index\n","\n","X_train = X.loc[train_idx]\n","X_test = X.loc[test_idx]\n","y_train = y.loc[train_idx]\n","y_test = y.loc[test_idx]"],"metadata":{"id":"CiBh8kP4X0j0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["preprocessor = ColumnTransformer([\n","    ('num', StandardScaler(), num_cols),\n","    ('cat', OneHotEncoder(drop='first'), cat_cols)\n","])"],"metadata":{"id":"219lggOAX0mW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import lightgbm\n","import lightgbm as lgbm\n","\n","# Split training data\n","X_train_split, X_valid, y_train_split, y_valid = train_test_split(\n","    X_train, y_train, test_size=0.2, random_state=42, stratify=y_train\n",")\n","\n","# Apply preprocessing\n","X_train_prep = preprocessor.fit_transform(X_train_split)\n","X_valid_prep = preprocessor.transform(X_valid)\n","X_test_prep = preprocessor.transform(X_test)\n","\n","# Define model: set verbosity here (not in .fit)\n","lgbm_model = lgbm.LGBMClassifier(\n","    n_estimators=500,\n","    learning_rate=0.01,\n","    max_depth=6,\n","    subsample=0.8,\n","    colsample_bytree=0.8,\n","    random_state=42,\n","    verbose=-1  # ✅ Set model-level verbosity (affects training output)\n",")\n","\n","# Train with early stopping — ❌ NO verbose in .fit()\n","lgbm_model.fit(\n","    X_train_prep, y_train_split,\n","    eval_set=[(X_valid_prep, y_valid)],\n","    eval_metric='logloss',\n","    callbacks=[lgbm.early_stopping(stopping_rounds=20, verbose=False)]  # Control verbosity here\n","    # Remove verbose from here\n",")\n","\n","# Output best iteration\n","print(f\"Best iteration: {lgbm_model.best_iteration_}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jI1EvTovX0o8","executionInfo":{"status":"ok","timestamp":1755190119217,"user_tz":-330,"elapsed":492,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"83fb6a1f-a966-421f-9574-c3421a5127ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best iteration: 291\n"]}]},{"cell_type":"code","source":["# Find threshold that maximizes F1\n","thresholds = np.linspace(0.1, 0.9, 100)\n","f1_scores = [f1_score(y_test, (y_proba >= t).astype(int)) for t in thresholds]\n","best_threshold = thresholds[np.argmax(f1_scores)]\n","\n","# Use best threshold\n","y_pred_opt = (y_proba >= best_threshold).astype(int)\n","metrics['F1 (Optimized)'] = f1_score(y_test, y_pred_opt)\n","print(f\"Optimal threshold: {best_threshold:.2f}, F1: {metrics['F1 (Optimized)']:.3f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jtVIho7Nl83J","executionInfo":{"status":"ok","timestamp":1755191974644,"user_tz":-330,"elapsed":252,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"e0c54c1a-cf81-428b-9940-1c9f26f9c0cd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimal threshold: 0.27, F1: 0.329\n"]}]},{"cell_type":"code","source":["def evaluate_model(y_true, y_proba, threshold=0.5):\n","    y_pred = (y_proba >= threshold).astype(int)\n","    return {\n","        'Accuracy': accuracy_score(y_true, y_pred),\n","        'Precision': precision_score(y_true, y_pred),\n","        'Recall': recall_score(y_true, y_pred),\n","        'F1': f1_score(y_true, y_pred),\n","        'AUC-ROC': roc_auc_score(y_true, y_proba),\n","        'AUC-PR': average_precision_score(y_true, y_proba),\n","        'Log Loss': log_loss(y_true, y_proba)\n","    }\n","\n","y_proba = lgbm_model.predict_proba(X_test_prep)[:, 1]\n","metrics = evaluate_model(y_test, y_proba)\n","\n","print(\"\\n=== Model Performance ===\")\n","for k, v in metrics.items():\n","    print(f\"{k}: {v:.3f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GEclw8XDX0r3","executionInfo":{"status":"ok","timestamp":1755191980314,"user_tz":-330,"elapsed":41,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"cf05f44d-f60e-4963-c9a7-aed2e026851d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== Model Performance ===\n","Accuracy: 0.930\n","Precision: 0.250\n","Recall: 0.032\n","F1: 0.057\n","AUC-ROC: 0.771\n","AUC-PR: 0.211\n","Log Loss: 0.227\n"]}]},{"cell_type":"code","source":["y_pred = (y_proba >= 0.5).astype(int)\n","\n","print(\"\\n=== Classification Report ===\")\n","print(classification_report(y_test, y_pred))\n","\n","cm = confusion_matrix(y_test, y_pred)\n","plt.figure(figsize=(6, 5))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Churn', 'Churn'], yticklabels=['No Churn', 'Churn'])\n","plt.title('Confusion Matrix')\n","plt.ylabel('Actual')\n","plt.xlabel('Predicted')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":687},"id":"q4U8m1OuX0us","executionInfo":{"status":"ok","timestamp":1755191988643,"user_tz":-330,"elapsed":193,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"47db3b6c-9fbb-461d-8a29-c8d95e2c4a6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== Classification Report ===\n","              precision    recall  f1-score   support\n","\n","           0       0.94      0.99      0.96      1316\n","           1       0.25      0.03      0.06        93\n","\n","    accuracy                           0.93      1409\n","   macro avg       0.59      0.51      0.51      1409\n","weighted avg       0.89      0.93      0.90      1409\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 600x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Save model\n","model_path = f\"{project_path}/churn_model.pkl\"\n","joblib.dump(lgbm_model, model_path)\n","print(f\"Model saved to: {model_path}\")\n","\n","# Save preprocessor\n","preprocessor_path = f\"{project_path}/preprocessor.pkl\"\n","joblib.dump(preprocessor, preprocessor_path)\n","print(f\"Preprocessor saved to: {preprocessor_path}\")\n","\n","# Save predictions\n","pred_df = pd.DataFrame({\n","    'CustomerID': X_test.index,\n","    'TrueChurn': y_test.values,\n","    'ChurnProbability': y_proba,\n","    'PredictedChurn': y_pred\n","})\n","pred_df.to_csv(f\"{project_path}/model_predictions.csv\", index=False)\n","print(f\"Predictions saved to: {project_path}/model_predictions.csv\")\n","\n","# Save metrics\n","import json\n","with open(f\"{project_path}/model_metrics.json\", 'w') as f:\n","    json.dump({k: round(float(v), 4) for k, v in metrics.items()}, f, indent=4)\n","print(f\"Metrics saved to: {project_path}/model_metrics.json\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wjRKbv3AX0x_","executionInfo":{"status":"ok","timestamp":1755192015160,"user_tz":-330,"elapsed":111,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"36b6afac-f6e0-4ba8-9176-ca1b86940a97"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model saved to: /content/drive/MyDrive/Business-Centric Predictive Model/churn_model.pkl\n","Preprocessor saved to: /content/drive/MyDrive/Business-Centric Predictive Model/preprocessor.pkl\n","Predictions saved to: /content/drive/MyDrive/Business-Centric Predictive Model/model_predictions.csv\n","Metrics saved to: /content/drive/MyDrive/Business-Centric Predictive Model/model_metrics.json\n"]}]},{"cell_type":"code","source":["# Get feature names after preprocessing (one-hot encoding + scaling)\n","feature_names = (\n","    num_cols +\n","    preprocessor.named_transformers_['cat'].get_feature_names_out(cat_cols).tolist()\n",")\n","\n","# Compute SHAP values\n","explainer = shap.Explainer(lgbm_model, X_train_prep, feature_names=feature_names)\n","shap_values = explainer(X_test_prep)\n","\n","# Plot using the same feature names\n","shap.summary_plot(shap_values, X_test_prep, feature_names=feature_names, max_display=10)\n","plt.title(\"SHAP Feature Importance\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"aHAlkDCafjZJ","executionInfo":{"status":"ok","timestamp":1755190546565,"user_tz":-330,"elapsed":25710,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"b1943de6-ce7e-421f-e64a-8b2dfbd00b9f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|===================| 1404/1409 [00:24<00:00]       "]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x550 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Select uncorrelated, high-signal features only\n","surv_features = [\n","    'is_month_to_month',\n","    'has_fiber',\n","    'no_online_support',\n","    'CLV',\n","    'days_since_last_interaction',\n","    'support_tickets_6m'\n","]\n","\n","# Prepare survival data\n","surv_df = df.copy()\n","surv_df['time'] = surv_df['tenure']\n","surv_df['event'] = surv_df['Churn']\n","surv_df.dropna(subset=['time', 'event'], inplace=True)\n","\n","# Scale features\n","from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(surv_df[surv_features])\n","X_scaled_df = pd.DataFrame(X_scaled, columns=surv_features, index=surv_df.index)\n","\n","# Combine with time/event\n","cox_df = pd.concat([X_scaled_df, surv_df[['time', 'event']]], axis=1)\n","\n","# Fit with penalizer to handle any multicollinearity\n","from lifelines import CoxPHFitter\n","cox_model = CoxPHFitter(penalizer=0.1, l1_ratio=0.0)  # L2 regularization\n","cox_model.fit(cox_df, duration_col='time', event_col='event')\n","\n","# Print summary\n","cox_model.print_summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":711},"id":"jHhK7XcjgLFv","executionInfo":{"status":"ok","timestamp":1755191877135,"user_tz":-330,"elapsed":755,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"37a189a0-a233-48cc-b331-8bb9952da68b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<lifelines.CoxPHFitter: fitted with 7043 total observations, 5174 right-censored observations>\n","             duration col = 'time'\n","                event col = 'event'\n","                penalizer = 0.1\n","                 l1 ratio = 0.0\n","      baseline estimation = breslow\n","   number of observations = 7043\n","number of events observed = 1869\n","   partial log-likelihood = -14239.13\n","         time fit was run = 2025-08-14 17:17:59 UTC\n","\n","---\n","                             coef exp(coef)  se(coef)  coef lower 95%  coef upper 95% exp(coef) lower 95% exp(coef) upper 95%\n","covariate                                                                                                                    \n","is_month_to_month            0.67      1.95      0.02            0.62            0.72                1.86                2.05\n","has_fiber                    0.44      1.55      0.02            0.39            0.48                1.48                1.62\n","no_online_support            0.30      1.35      0.02            0.26            0.34                1.29                1.40\n","CLV                         -0.73      0.48      0.03           -0.78           -0.68                0.46                0.51\n","days_since_last_interaction -0.03      0.97      0.02           -0.07            0.01                0.94                1.01\n","support_tickets_6m           0.01      1.01      0.02           -0.02            0.05                0.98                1.05\n","\n","                             cmp to      z      p  -log2(p)\n","covariate                                                  \n","is_month_to_month              0.00  26.85 <0.005    524.93\n","has_fiber                      0.00  19.05 <0.005    266.34\n","no_online_support              0.00  14.75 <0.005    161.10\n","CLV                            0.00 -27.70 <0.005    558.47\n","days_since_last_interaction    0.00  -1.44   0.15      2.72\n","support_tickets_6m             0.00   0.70   0.49      1.04\n","---\n","Concordance = 0.90\n","Partial AIC = 28490.26\n","log-likelihood ratio test = 2827.82 on 6 df\n","-log2(p) of ll-ratio test = inf"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <tbody>\n","    <tr>\n","      <th>model</th>\n","      <td>lifelines.CoxPHFitter</td>\n","    </tr>\n","    <tr>\n","      <th>duration col</th>\n","      <td>'time'</td>\n","    </tr>\n","    <tr>\n","      <th>event col</th>\n","      <td>'event'</td>\n","    </tr>\n","    <tr>\n","      <th>penalizer</th>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>l1 ratio</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>baseline estimation</th>\n","      <td>breslow</td>\n","    </tr>\n","    <tr>\n","      <th>number of observations</th>\n","      <td>7043</td>\n","    </tr>\n","    <tr>\n","      <th>number of events observed</th>\n","      <td>1869</td>\n","    </tr>\n","    <tr>\n","      <th>partial log-likelihood</th>\n","      <td>-14239.13</td>\n","    </tr>\n","    <tr>\n","      <th>time fit was run</th>\n","      <td>2025-08-14 17:17:59 UTC</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th style=\"min-width: 12px;\"></th>\n","      <th style=\"min-width: 12px;\">coef</th>\n","      <th style=\"min-width: 12px;\">exp(coef)</th>\n","      <th style=\"min-width: 12px;\">se(coef)</th>\n","      <th style=\"min-width: 12px;\">coef lower 95%</th>\n","      <th style=\"min-width: 12px;\">coef upper 95%</th>\n","      <th style=\"min-width: 12px;\">exp(coef) lower 95%</th>\n","      <th style=\"min-width: 12px;\">exp(coef) upper 95%</th>\n","      <th style=\"min-width: 12px;\">cmp to</th>\n","      <th style=\"min-width: 12px;\">z</th>\n","      <th style=\"min-width: 12px;\">p</th>\n","      <th style=\"min-width: 12px;\">-log2(p)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>is_month_to_month</th>\n","      <td>0.67</td>\n","      <td>1.95</td>\n","      <td>0.02</td>\n","      <td>0.62</td>\n","      <td>0.72</td>\n","      <td>1.86</td>\n","      <td>2.05</td>\n","      <td>0.00</td>\n","      <td>26.85</td>\n","      <td>&lt;0.005</td>\n","      <td>524.93</td>\n","    </tr>\n","    <tr>\n","      <th>has_fiber</th>\n","      <td>0.44</td>\n","      <td>1.55</td>\n","      <td>0.02</td>\n","      <td>0.39</td>\n","      <td>0.48</td>\n","      <td>1.48</td>\n","      <td>1.62</td>\n","      <td>0.00</td>\n","      <td>19.05</td>\n","      <td>&lt;0.005</td>\n","      <td>266.34</td>\n","    </tr>\n","    <tr>\n","      <th>no_online_support</th>\n","      <td>0.30</td>\n","      <td>1.35</td>\n","      <td>0.02</td>\n","      <td>0.26</td>\n","      <td>0.34</td>\n","      <td>1.29</td>\n","      <td>1.40</td>\n","      <td>0.00</td>\n","      <td>14.75</td>\n","      <td>&lt;0.005</td>\n","      <td>161.10</td>\n","    </tr>\n","    <tr>\n","      <th>CLV</th>\n","      <td>-0.73</td>\n","      <td>0.48</td>\n","      <td>0.03</td>\n","      <td>-0.78</td>\n","      <td>-0.68</td>\n","      <td>0.46</td>\n","      <td>0.51</td>\n","      <td>0.00</td>\n","      <td>-27.70</td>\n","      <td>&lt;0.005</td>\n","      <td>558.47</td>\n","    </tr>\n","    <tr>\n","      <th>days_since_last_interaction</th>\n","      <td>-0.03</td>\n","      <td>0.97</td>\n","      <td>0.02</td>\n","      <td>-0.07</td>\n","      <td>0.01</td>\n","      <td>0.94</td>\n","      <td>1.01</td>\n","      <td>0.00</td>\n","      <td>-1.44</td>\n","      <td>0.15</td>\n","      <td>2.72</td>\n","    </tr>\n","    <tr>\n","      <th>support_tickets_6m</th>\n","      <td>0.01</td>\n","      <td>1.01</td>\n","      <td>0.02</td>\n","      <td>-0.02</td>\n","      <td>0.05</td>\n","      <td>0.98</td>\n","      <td>1.05</td>\n","      <td>0.00</td>\n","      <td>0.70</td>\n","      <td>0.49</td>\n","      <td>1.04</td>\n","    </tr>\n","  </tbody>\n","</table><br><div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <tbody>\n","    <tr>\n","      <th>Concordance</th>\n","      <td>0.90</td>\n","    </tr>\n","    <tr>\n","      <th>Partial AIC</th>\n","      <td>28490.26</td>\n","    </tr>\n","    <tr>\n","      <th>log-likelihood ratio test</th>\n","      <td>2827.82 on 6 df</td>\n","    </tr>\n","    <tr>\n","      <th>-log2(p) of ll-ratio test</th>\n","      <td>inf</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/latex":"\\begin{tabular}{lrrrrrrrrrrr}\n & coef & exp(coef) & se(coef) & coef lower 95% & coef upper 95% & exp(coef) lower 95% & exp(coef) upper 95% & cmp to & z & p & -log2(p) \\\\\ncovariate &  &  &  &  &  &  &  &  &  &  &  \\\\\nis_month_to_month & 0.67 & 1.95 & 0.02 & 0.62 & 0.72 & 1.86 & 2.05 & 0.00 & 26.85 & 0.00 & 524.93 \\\\\nhas_fiber & 0.44 & 1.55 & 0.02 & 0.39 & 0.48 & 1.48 & 1.62 & 0.00 & 19.05 & 0.00 & 266.34 \\\\\nno_online_support & 0.30 & 1.35 & 0.02 & 0.26 & 0.34 & 1.29 & 1.40 & 0.00 & 14.75 & 0.00 & 161.10 \\\\\nCLV & -0.73 & 0.48 & 0.03 & -0.78 & -0.68 & 0.46 & 0.51 & 0.00 & -27.70 & 0.00 & 558.47 \\\\\ndays_since_last_interaction & -0.03 & 0.97 & 0.02 & -0.07 & 0.01 & 0.94 & 1.01 & 0.00 & -1.44 & 0.15 & 2.72 \\\\\nsupport_tickets_6m & 0.01 & 1.01 & 0.02 & -0.02 & 0.05 & 0.98 & 1.05 & 0.00 & 0.70 & 0.49 & 1.04 \\\\\n\\end{tabular}\n"},"metadata":{}}]},{"cell_type":"code","source":["def recommend_action(row, prob):\n","    actions = []\n","    cost = 0\n","    success = 0.5\n","    if prob > 0.8:\n","        if row['is_month_to_month']:\n","            actions.append(\"Offer 3-month 10% discount\")\n","            cost += 25\n","        if row['no_online_support']:\n","            actions.append(\"Assign free support session\")\n","            cost += 20\n","        success = 0.65\n","    elif prob > 0.5:\n","        actions.append(\"Send re-engagement email\")\n","        cost += 5\n","        success = 0.4\n","    return {'actions': actions, 'cost': cost, 'success_rate': success}\n","\n","# Apply to top 100 high-risk\n","top_risk = X_test.copy()\n","top_risk['churn_prob'] = y_proba\n","top_risk = top_risk.sort_values('churn_prob', ascending=False).head(100)\n","\n","recommendations = [recommend_action(row, row['churn_prob']) for _, row in top_risk.iterrows()]\n","rec_df = pd.DataFrame(recommendations)\n","final_rec = pd.concat([top_risk[['churn_prob']].reset_index(), rec_df], axis=1)\n","final_rec.to_csv(f\"{project_path}/retention_recommendations.csv\", index=False)\n","print(f\"Retention recommendations saved.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SAciUE-NfjzN","executionInfo":{"status":"ok","timestamp":1755190691353,"user_tz":-330,"elapsed":54,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"2cd257b2-6804-48f3-c805-9728955dd050"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Retention recommendations saved.\n"]}]},{"cell_type":"code","source":["clv_series = df.loc[X_test.index, 'CLV']\n","revenue_at_risk = clv_series[top_risk.index].sum()\n","total_cost = sum(r['cost'] for r in recommendations)\n","success_rate = np.mean([r['success_rate'] for r in recommendations])\n","revenue_saved = revenue_at_risk * success_rate\n","net_benefit = revenue_saved - total_cost\n","roi = (revenue_saved - total_cost) / total_cost if total_cost > 0 else float('inf')\n","\n","report = f\"\"\"\n","Business Impact Report\n","----------------------\n","Revenue at Risk: ${revenue_at_risk:,.0f}\n","Intervention Cost: ${total_cost:,.0f}\n","Expected Revenue Saved: ${revenue_saved:,.0f}\n","Net Benefit: ${net_benefit:,.0f}\n","ROI: {roi:.2f}x\n","\"\"\"\n","\n","with open(f\"{project_path}/business_impact_report.txt\", 'w') as f:\n","    f.write(report)\n","\n","print(report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IuViMge4fj16","executionInfo":{"status":"ok","timestamp":1755190725341,"user_tz":-330,"elapsed":49,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"97718554-8d86-482b-f67e-9787e86f735e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Business Impact Report\n","----------------------\n","Revenue at Risk: $469,052\n","Intervention Cost: $60\n","Expected Revenue Saved: $228,898\n","Net Benefit: $228,838\n","ROI: 3813.96x\n","\n"]}]},{"cell_type":"code","source":["# Add predicted risk group\n","pred_df['risk_group'] = ['High' if p > best_threshold else 'Low' for p in y_proba]\n","\n","# Prepare survival data for logrank test\n","logrank_df = pred_df.copy()\n","logrank_df['time'] = df.loc[X_test.index, 'tenure'].values\n","logrank_df['event'] = y_test.values\n","\n","# Split into high and low risk\n","high_risk = logrank_df[logrank_df['risk_group'] == 'High']\n","low_risk = logrank_df[logrank_df['risk_group'] == 'Low']\n","\n","from lifelines.statistics import logrank_test\n","results = logrank_test(\n","    high_risk['time'], low_risk['time'],\n","    event_observed_A=high_risk['event'],\n","    event_observed_B=low_risk['event']\n",")\n","results.print_summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"NImWlKWTfj5d","executionInfo":{"status":"ok","timestamp":1755192047303,"user_tz":-330,"elapsed":202,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"a552624f-cc92-4a94-c948-551dc84a4a83"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<lifelines.StatisticalResult: logrank_test>\n","               t_0 = -1\n"," null_distribution = chi squared\n","degrees_of_freedom = 1\n","         test_name = logrank_test\n","\n","---\n"," test_statistic      p  -log2(p)\n","         169.96 <0.005    126.64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <tbody>\n","    <tr>\n","      <th>t_0</th>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>null_distribution</th>\n","      <td>chi squared</td>\n","    </tr>\n","    <tr>\n","      <th>degrees_of_freedom</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>test_name</th>\n","      <td>logrank_test</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>test_statistic</th>\n","      <th>p</th>\n","      <th>-log2(p)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>169.96</td>\n","      <td>&lt;0.005</td>\n","      <td>126.64</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/latex":"\\begin{tabular}{lrrr}\n & test_statistic & p & -log2(p) \\\\\n0 & 169.96 & 0.00 & 126.64 \\\\\n\\end{tabular}\n"},"metadata":{}}]},{"cell_type":"code","source":["# Step 1: Install dependencies\n","!pip install streamlit pyngrok\n","\n","# Step 2: Write your Streamlit app\n","# Write Streamlit app manually\n","with open(\"app.py\", \"w\") as f:\n","    f.write(\"\"\"\n","import streamlit as st\n","import joblib\n","import pandas as pd\n","import numpy as np\n","\n","# Load model and preprocessor\n","try:\n","    model = joblib.load(\"churn_model.pkl\")\n","    preprocessor = joblib.load(\"preprocessor.pkl\")\n","except Exception as e:\n","    st.error(f\"Error loading model: {e}\")\n","    st.stop()\n","\n","st.title(\"ChurnShield – Customer Churn Predictor\")\n","\n","# Input fields\n","tenure = st.slider(\"Tenure (months)\", 0, 72, 12)\n","monthly_charges = st.number_input(\"Monthly Charges\", 0.0, 1000.0, 80.0)\n","total_charges = st.number_input(\"Total Charges\", 0.0, 10000.0, 960.0)\n","clv = st.number_input(\"Customer Lifetime Value\", 0.0, 10000.0, 1200.0)\n","support_tickets = st.number_input(\"Support Tickets (6 months)\", 0, 20, 1)\n","days_since = st.slider(\"Days Since Last Interaction\", 0, 365, 30)\n","avg_spend = total_charges / (tenure + 1)\n","\n","gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n","contract = st.selectbox(\"Contract\", [\"Month-to-month\", \"One year\", \"Two year\"])\n","payment = st.selectbox(\"Payment Method\", [\"Electronic check\", \"Mailed check\", \"Bank transfer (automatic)\", \"Credit card (automatic)\"])\n","internet = st.selectbox(\"Internet Service\", [\"DSL\", \"Fiber optic\", \"No\"])\n","\n","# Predict\n","if st.button(\"Predict Churn Risk\"):\n","    df = pd.DataFrame([{\n","        'tenure': tenure,\n","        'MonthlyCharges': monthly_charges,\n","        'TotalCharges': total_charges,\n","        'CLV': clv,\n","        'support_tickets_6m': support_tickets,\n","        'days_since_last_interaction': days_since,\n","        'avg_monthly_spend': avg_spend,\n","        'gender': gender,\n","        'Contract': contract,\n","        'PaymentMethod': payment,\n","        'InternetService': internet\n","    }])\n","\n","    try:\n","        X = preprocessor.transform(df)\n","        prob = model.predict_proba(X)[0, 1]\n","        st.write(f\"**Churn Probability**: {prob:.2%}\")\n","\n","        if prob > 0.8:\n","            st.error(\"High Risk – Recommend 10% discount + support session\")\n","        elif prob > 0.5:\n","            st.warning(\"Medium Risk – Send re-engagement email\")\n","        else:\n","            st.success(\"Low Risk – No action needed\")\n","    except Exception as e:\n","        st.error(f\"Prediction error: {e}\")\n","\"\"\")\n","import streamlit as st\n","import joblib\n","import pandas as pd\n","\n","# Load model and preprocessor (assumes they are saved)\n","model = joblib.load(\"/content/drive/MyDrive/Business-Centric Predictive Model/churn_model.pkl\")\n","preprocessor = joblib.load(\"/content/drive/MyDrive/Business-Centric Predictive Model/preprocessor.pkl\")\n","\n","st.title(\"ChurnShield – Customer Churn Predictor\")\n","\n","# Input fields\n","tenure = st.slider(\"Tenure (months)\", 0, 72, 12)\n","monthly_charges = st.number_input(\"Monthly Charges\", 0.0, 1000.0, 80.0)\n","total_charges = st.number_input(\"Total Charges\", 0.0, 10000.0, 960.0)\n","clv = st.number_input(\"Customer Lifetime Value\", 0.0, 10000.0, 1200.0)\n","support_tickets = st.number_input(\"Support Tickets (6 months)\", 0, 20, 1)\n","days_since = st.slider(\"Days Since Last Interaction\", 0, 365, 30)\n","avg_spend = total_charges / (tenure + 1)\n","\n","gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n","contract = st.selectbox(\"Contract\", [\"Month-to-month\", \"One year\", \"Two year\"])\n","payment = st.selectbox(\"Payment Method\", [\"Electronic check\", \"Mailed check\", \"Bank transfer (automatic)\", \"Credit card (automatic)\"])\n","internet = st.selectbox(\"Internet Service\", [\"DSL\", \"Fiber optic\", \"No\"])\n","\n","# Predict\n","if st.button(\"Predict Churn Risk\"):\n","    df = pd.DataFrame([{\n","        'tenure': tenure,\n","        'MonthlyCharges': monthly_charges,\n","        'TotalCharges': total_charges,\n","        'CLV': clv,\n","        'support_tickets_6m': support_tickets,\n","        'days_since_last_interaction': days_since,\n","        'avg_monthly_spend': avg_spend,\n","        'gender': gender,\n","        'Contract': contract,\n","        'PaymentMethod': payment,\n","        'InternetService': internet\n","    }])\n","\n","    try:\n","        X = preprocessor.transform(df)\n","        prob = model.predict_proba(X)[0, 1]\n","        st.write(f\"**Churn Probability**: {prob:.2%}\")\n","\n","        if prob > 0.8:\n","            st.error(\"High Risk – Recommend 10% discount + support session\")\n","        elif prob > 0.5:\n","            st.warning(\"Medium Risk – Send re-engagement email\")\n","        else:\n","            st.success(\"Low Risk – No action needed\")\n","    except Exception as e:\n","        st.error(f\"Error: {e}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qYFxg7lqo_31","executionInfo":{"status":"ok","timestamp":1755193611430,"user_tz":-330,"elapsed":6806,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"3851efba-a0a3-456d-b21d-0a8c97d9487b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.48.1)\n","Requirement already satisfied: pyngrok in /usr/local/lib/python3.11/dist-packages (7.3.0)\n","Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.1)\n","Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n","Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (25.0)\n","Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.3.0)\n","Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.5)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.14.1)\n","Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n","Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.45)\n","Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n","Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.1.6)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (4.25.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2.1.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.3)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.8.3)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (25.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2025.4.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.27.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n"]},{"output_type":"stream","name":"stderr","text":["2025-08-14 17:46:54.710 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.711 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.714 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.715 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.716 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.717 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.718 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.719 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.719 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.721 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.722 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.723 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.724 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.726 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.726 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.728 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.729 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.730 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.731 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.732 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.733 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.734 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.735 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.737 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.737 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.738 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.739 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.740 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.740 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.741 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.742 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.742 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.743 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.743 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.744 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.744 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.745 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.746 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.746 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.747 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.748 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.748 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.749 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.750 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.750 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.751 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.752 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.752 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.753 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.753 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.754 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.755 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.756 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.756 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.757 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.757 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.758 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.759 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.759 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.760 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.761 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.761 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.762 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.762 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.763 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.764 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.764 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.765 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.766 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.766 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.767 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.768 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.769 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.769 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.770 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.770 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2025-08-14 17:46:54.771 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"]}]},{"cell_type":"code","source":["!pip install -q -r requirements_convert.txt\n","!python convert_models_to_onnx.py \\\n","  --models_dir \"/content/drive/MyDrive/Business-Centric Predictive Model\" \\\n","  --sample_csv \"/content/drive/MyDrive/Business-Centric Predictive Model/X_train.csv\"\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h3tuSTvWo__V","executionInfo":{"status":"ok","timestamp":1755250019073,"user_tz":-330,"elapsed":9169,"user":{"displayName":"Pavani Pandu","userId":"10254851795757852470"}},"outputId":"d4af979d-e29f-4d06-e861-010add04706d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[31mERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements_convert.txt'\u001b[0m\u001b[31m\n","\u001b[0mpython3: can't open file '/content/convert_models_to_onnx.py': [Errno 2] No such file or directory\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"xSQAzEWOpAEV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Vp9hf3BGpAID"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_HXPKW6HpALf"},"execution_count":null,"outputs":[]}]}